#include "Func.h"
#include "Libs.h"
#include "Classes.h"

void Screen_Show() {	//функция вывода на экран
	cout << "Настоящей  работой  выполнено  прикладное  программирование  расчетов  исследований" << endl;
	cout << "твердости черных и цветных металлов лабораторной работы  кафедры 'Микро-нанотехника'" << endl;
	cout << "машиностроительного факультета Белорусского национального технического университета" << endl;
	cout << "-----------------------------------------------------------------------------------" << endl;
	cout << "Тема лабораторной работы: Изучение механических свойств конструкционных материалов." << endl;
	cout << "Измерение твердости по Бринеллю." << endl;
}

void StartMenu() {
	while (true) {
		Screen oScr;	// Объект oScr вывода на экран титульного листа
		Screen_Show();	// Функция вывода на экран описания 

		int metal = 0;
		metal = menu(); // Запуск функции главного меню

		if (metal == 1) { 	 // Запуск класса steel (сталь) с перегрузкой вывода объекта oS
			steel oS;
			cout << oS;
			oS.write_Res();	 //запись результатов в файл
		}
		else {
			if (metal == 2) { 	// Запуск класса aluminum (алюминий) с перегрузкой вывода объекта oA
				aluminum oA;
				cout << oA;
				oA.write_ResA();  //запись результатов в файл
			}
			else {
				if (metal == 3) { help(); }// Запуск функции справочной информации
				else{
					if (metal == 4) { readHB(); } // Запуск функции просмотра истории расчетов
					else {
						if (metal == 5) { deleteFile(); }
					}
				}
			}
		}
		if (metal == 6) { break; }
		_getch();
		system("cls");
	}
}

int menu(){	//функция главного меню с бесконечным циклом
	cout << endl;
	int choice_metal = 0;
	while (true) {
		cout << "Выберите металл: \n 1 - Сталь \n 2 - Алюминий \n 3 - Справка \n 4 - Показать историю расчетов \n 5 - Удалить историю расчетов \n 6 - Выход" << endl;
		cin >> choice_metal;
		if ((choice_metal > 0) && (choice_metal <= 6)) {
			return choice_metal;
		}
		else {
			cout << "Введенный номер должен быть от 1 до 6, введите правильный номер." << endl;
		}
	};
	
}

int menu_choise_steel_type() {	//функция выбора типа стали с возвратом переменной n_type
	int n_type;
	cout << "Вы выбрали сталь, укажите тип:" << endl;
	
	cout << "1 - Сталь 20 (0.2% C)" << endl;
	cout << "2 - Сталь 45 (0.45% C)" << endl;
	cout << "3 - Сталь 98 (0.8% C)" << endl;
	cin >> n_type;
	return n_type;
}

double steel_calculation(double d) { //функция расчета твердости по Бринеллю для стали
	double calcHB = 0;
	double S;
	double D_calc = pow(D, 2);
	double d_calc = pow(d, 2);
	double root;
	double calc_S;
	double calc_P = 2 * P;

	root = sqrt(D_calc - d_calc);
	calc_S = D - root;
	S = PI * D * calc_S;
	calcHB = calc_P / S;	
	return calcHB;
}

void help() {	//Функция вывода на экран справочной информации
	cout << "\nСправочная информация." << endl;
	cout << "______________________________________________________________________________________________" << endl;
	cout << "Измерение твердости по Бринеллю происходит путем внедрения с определенной нагрузкой закаленного" << endl;
	cout << "стального шарика(диаметром 2, 5 мм; 5 мм или 10 мм) в поверхность испытуемого образца. В резу-" << endl;
	cout << "льтате на поверхности образца получается отпечаток. С помощью лупы измеряют диаметр отпечатка." << endl;
	cout << "\nФормула расчета твердости методом Бринелля (HB):" << endl;
	cout << "      P             2P" << endl;;
	cout << "HB = --- = ------------------------" << endl;
	cout << "      S                   _________" << endl;
	cout << "           pi * D * (D - V D^ - d^)" << endl << endl;
	cout << "где:\n* НВ – при использовании стального шарика для металлов с твердостью менее 450 единиц кгс" << endl;
	cout << "* P – нагрузка, действующего на индентор, Н(кгс);" << endl;
	cout << "* S – площадь поверхности отпечатка, мм2;" << endl;
	cout << "* D – диаметр стального шарика, мм;" << endl;
	cout << "* d – диаметр отпечатка, мм." << endl;
	cout << "______________________________________________________________________________________________" << endl;
}

void readHB() {
	string line;
	ifstream file (file_res);
	if (file.is_open()){
		while (!file.eof()){
			getline(file, line);
			cout << line << endl;
		}
		file.close();
	}
	else cout << "Файл результатов расчета удален";
}

void deleteFile() {
	remove(file_res);
	cout << "Файл удален";
}
